# Enable the subsequent settings only in interactive sessions
case $- in
  *i*) ;;
    *) return;;
esac

# Path to your oh-my-bash installation.
export OSH='/home/bmsce/.oh-my-bash'

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-bash is loaded.
OSH_THEME="font"

# If you set OSH_THEME to "random", you can ignore themes you don't like.
# OMB_THEME_RANDOM_IGNORED=("powerbash10k" "wanelo")

# Uncomment the following line to use case-sensitive completion.
# OMB_CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# OMB_HYPHEN_SENSITIVE="false"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_OSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you don't want the repository to be considered dirty
# if there are untracked files.
# SCM_GIT_DISABLE_UNTRACKED_DIRTY="true"

# Uncomment the following line if you want to completely ignore the presence
# of untracked files in the repository.
# SCM_GIT_IGNORE_UNTRACKED="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.  One of the following values can
# be used to specify the timestamp format.
# * 'mm/dd/yyyy'     # mm/dd/yyyy + time
# * 'dd.mm.yyyy'     # dd.mm.yyyy + time
# * 'yyyy-mm-dd'     # yyyy-mm-dd + time
# * '[mm/dd/yyyy]'   # [mm/dd/yyyy] + [time] with colors
# * '[dd.mm.yyyy]'   #[dd.mm.yyyy] + [time] with colors
# * '[yyyy-mm-dd]'   # [yyyy-mm-dd] + [time] with colors
# If not set, the default value is 'yyyy-mm-dd'.
# HIST_STAMPS='yyyy-mm-dd'

# Uncomment the following line if you do not want OMB to overwrite the existing
# aliases by the default OMB aliases defined in lib/*.sh
# OMB_DEFAULT_ALIASES="check"

# Would you like to use another custom folder than $OSH/custom?
# OSH_CUSTOM=/path/to/new-custom-folder

# To disable the uses of "sudo" by oh-my-bash, please set "false" to
# this variable.  The default behavior for the empty value is "true".
OMB_USE_SUDO=true

# To enable/disable display of Python virtualenv and condaenv
# OMB_PROMPT_SHOW_PYTHON_VENV=true  # enable
# OMB_PROMPT_SHOW_PYTHON_VENV=false # disable

# Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
# Custom completions may be added to ~/.oh-my-bash/custom/completions/
# Example format: completions=(ssh git bundler gem pip pip3)
# Add wisely, as too many completions slow down shell startup.
completions=(
  git
  composer
  ssh
)

# Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
# Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
# Example format: aliases=(vagrant composer git-avh)
# Add wisely, as too many aliases slow down shell startup.
aliases=(
  general
)

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  bashmarks
)

# Which plugins would you like to conditionally load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format:
#  if [ "$DISPLAY" ] || [ "$SSH" ]; then
#      plugins+=(tmux-autoattach)
#  fi

source "$OSH"/oh-my-bash.sh

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-bash libs,
# plugins, and themes. Aliases can be placed here, though oh-my-bash
# users are encouraged to define aliases within the OSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias bashconfig="mate ~/.bashrc"
# alias ohmybash="mate ~/.oh-my-bash"

export PATH=$PATH:/usr/local/go/bin
export PATH="$PATH:/opt/nvim-linux64/bin"
alias tmux='tmux -u' # to always start tmux in utf8 mode

# Define the webpass function
webpass() {
    local website password password_hash password_base64 secure_password
    local PASSWORD_FILE="$HOME/.password_store"  # Store password file in the home directory

    # Function to initialize the password file if it doesn't exist
    initialize_password_file() {
        if [ ! -f "$PASSWORD_FILE" ]; then
            touch "$PASSWORD_FILE"
            chmod 600 "$PASSWORD_FILE"
        fi
    }

    # Function to generate a secure password based on website and password
    generate_secure_password() {
        local site=$1
        local pass=$2

        # Generate a SHA-256 hash of the site and password
        password_hash=$(echo -n "$site$pass" | sha256sum | cut -d" " -f1)        
        # Convert the SHA-256 hash to Base64
        password_base64=$(echo -n "$password_hash" | xxd -r -p | base64)        
        # Take the first 16 characters of the Base64 encoded string
        secure_password=$(echo -n "$password_base64" | head -c 16)
    }

    # Function to store a password in the hidden file
    store_password() {
        local site=$1
        local pass=$2

        # Check if a password already exists for the site
        if grep -q "^$site:" "$PASSWORD_FILE"; then
            echo "A password already exists for $site. Would you like to update it? (yes/no)"
            read -r response
            
            # Convert response to lowercase to handle different cases
            response=$(echo "$response" | tr '[:upper:]' '[:lower:]')

            if [ "$response" != "yes" ]; then
                echo "Password update aborted."
                return
            fi

            # Remove the existing password entry for the site
            grep -v "^$site:" "$PASSWORD_FILE" > "$PASSWORD_FILE.tmp" && mv "$PASSWORD_FILE.tmp" "$PASSWORD_FILE"
        fi

        # Generate a secure password
        generate_secure_password "$site" "$pass"

        # Store the password in the hidden file
        echo "$site:$pass" >> "$PASSWORD_FILE"
        chmod 600 "$PASSWORD_FILE"

        echo "Password for $site stored successfully."
        echo "Use this password: $secure_password"
    }

    # Function to get a password for a given site from the password store
    get_pass() {
        local site=$1
        local stored_pass
        if grep -q "^$site:" "$PASSWORD_FILE"; then
            # Retrieve the stored password
            stored_pass=$(grep "^$site:" "$PASSWORD_FILE" | cut -d":" -f2)
            
            echo "This is site: $site and stored password: $stored_pass"
            
            generate_secure_password "$site" "$stored_pass"
            
            # Echo the secure password
            echo "Secure password for $site: $secure_password"
        else
            echo "No password found for $site."
        fi
    }

    # Check if -g flag is provided
    if [ "$1" == "-g" ]; then
        shift

        initialize_password_file
        get_pass "$1"
        return 0
    fi

    # Normal execution for storing a password
    website=$1
    if [ -z "$website" ]; then
        echo "Error: site cannot be empty."
        return 1
    fi

    # Hide the password input
    stty -echo
    read -p "Password: " password
    echo
    stty echo

    if [ -z "$password" ]; then
        echo "Error: Password cannot be empty."
        return 1
    fi

    initialize_password_file
    store_password "$website" "$password"
}

opennvimconf(){
    /home/bmsce/Projects/bashscripts/opennvimconf/opennvimconf.sh
}

nopen(){
    /home/bmsce/Projects/bashscripts/nopen/nopen.sh
}


export PATH=$PATH:$(go env GOPATH)/bin

cp ~/.bashrc ~/.config/bash/bashrc

